#!/usr/bin/python

import argparse
import os

from datetime import datetime
from multiprocessing import Pool

import requests
from boto import ec2
from boto.ec2 import cloudwatch


def get_status(instance):
    try:
        r = requests.get('http://%s/realstatus/' % instance.public_dns_name)
        return (instance, r.json())
    except Exception, e:
        print e
        return None


def datadog_metrics(statuses):
    try:
        from dogapi import dog_http_api as api
    except ImportError:
        return

    try:
        api.api_key = os.environ['DATADOG_API_KEY']
    except KeyError:
        return

    for instance, status in statuses:
        tags = ["%s:%s" % (key, val) for key, val in instance.tags.iteritems()]
        api.metric('pushgo.client_count', status['clientCount'],
                   tags=tags, host=instance.id)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--region', default='us-west-2')
    parser.add_argument('-s', '--stackname', help='stack name')
    args = parser.parse_args()

    c = ec2.connect_to_region(args.region)

    reservations = c.get_all_instances(
        filters={'tag:aws:cloudformation:stack-name': args.stackname,
                 'tag:aws:cloudformation:logical-id': 'AppServerAutoScale'}
    )

    instances = [i for r in reservations for i in r.instances]

    if not instances:
        print "No instances found."
        exit(1)

    p = Pool(6)
    status = [s for s in p.map(get_status, instances) if s is not None]
    check_time = datetime.utcnow()

    datadog_metrics(status)

    c = cloudwatch.connect_to_region(args.region)

    kwargs = {
        'namespace': 'Pushgo',
        'name': 'connectionCount',
        'timestamp': check_time,
        'unit': 'Count',
    }

    for inst, data in status:
        c.put_metric_data(
            value=data['clientCount'],
            dimensions={'InstanceId': inst.id},
            **kwargs
        )

    client_counts = [data['clientCount'] for inst, data in status]
    c.put_metric_data(
        statistics={'maximum': max(client_counts),
                    'minimum': min(client_counts),
                    'samplecount': len(client_counts),
                    'sum': sum(client_counts)},
        dimensions={'Stack': args.stackname},
        **kwargs
    )

main()
